{
	"request": [],
	"sendHeader": [
		{
			"enable": 1,
			"name": "Origin anonymizer - Request",
			"ruleType": "modifySendHeader",
			"matchType": "all",
			"pattern": "",
			"exclude": "",
			"isFunction": true,
			"code": "for (const header of val) {\n\tif (header.name.toLowerCase() === 'origin') {\n\t\tif (detail.url.split('/', 3)[2].endsWith(header.value.split('//')[1].replace(/(^www\\.)/,''))) { return; }\n\t\tif (header.value == 'https://www.youtube.com' && detail.url.split('/', 3)[2].endsWith('.googlevideo.com')) { return; }\n\t\theader.value = detail.url.split('/', 3).join('/');\n\t\treturn;\n\t}\n}",
			"id": 1
		}
	],
	"receiveHeader": [
		{
			"enable": 1,
			"name": "remove ETag",
			"ruleType": "modifyReceiveHeader",
			"matchType": "all",
			"pattern": "",
			"exclude": "",
			"isFunction": true,
			"code": "for (let header in val) {\n\tif (val[header].name.toLowerCase() === 'etag') {\n\t\tval[header].value = '';\n\t\tbreak;\n\t}\n}",
			"id": 1
		},
		{
			"enable": 1,
			"name": "Origin anonymizer - Response",
			"ruleType": "modifyReceiveHeader",
			"matchType": "all",
			"pattern": "",
			"exclude": "",
			"isFunction": true,
			"code": "for (const header of val) {\n\tif (header.name.toLowerCase() == 'access-control-allow-origin') {\n\t\tif (header.value == 'https://www.youtube.com' || header.value == 'https://twitter.com') { return; }\n\t\theader.value = '*';\n\t\treturn;\n\t}\n}\nval.push({'name': 'Access-Control-Allow-Origin', 'value': detail.originUrl.split('/', 3).join('/')});",
			"id": 2
		}
	]
}